)
) +
geom_line() +
theme_minimal() +
theme(legend.position = "bottom") +
scale_color_brewer(
palette = "Set1",
labels = fondi
) +
labs(
x = "",
y = "",
title = paste0("Time Series of ", var_confronto_title, " for ", paste(fondi, collapse = ", "))
)
if(type_plot == "abs"){
plot <- plot +
scale_y_continuous(
labels = scales::dollar_format(accuracy = 1, prefix = "€")
) +
labs(
subtitle = "Absolute values"
)
} else {
plot <- plot +
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
}
return(plot)
}
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "abs")
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_0")
# Plotting functions for the values in absolute value or indexed
plot_time_series <- function(
df,
fondi = c("Fondo A", "Fondo B"),
var_confronto = "partial_withdrawals_claims",
type_plot = "abs",
year = NULL
){
if(!type_plot %in% c("abs", "index_0", "index_t")) stop("type_plot must be 'abs' or 'index_0' or 'index_t'")
var_confronto_title <- var_confronto |> str_replace_all("_", " ") |> str_to_title()
data |>
select(
year,
group,
time,
reserve_math,
all_of(var_confronto),
) |>
filter(
group %in% fondi,
ifelse(is.null(!!year), T, year %in% !!year)
) |>
mutate(
across(year, as.factor),
time = time / 12,
y = case_when(
type_plot == "abs" ~ .data[[var_confronto]],
type_plot == "index_0" ~ .data[[var_confronto]] / first(reserve_math),
type_plot == "index_t" ~ .data[[var_confronto]] / lag(reserve_math)
)
) |>
filter(time > 0) -> data_graph
plot <- ggplot(
data_graph,
aes(
x = time,
y = y,
color = year,
linetype = group
)
) +
geom_line() +
theme_minimal() +
theme(legend.position = "bottom") +
scale_color_brewer(
palette = "Set1",
labels = fondi
) +
labs(
x = "",
y = "",
title = paste0("Time Series of ", var_confronto_title, " for ", paste(fondi, collapse = ", "))
)
if(type_plot == "abs"){
plot <- plot +
scale_y_continuous(
labels = scales::dollar_format(accuracy = 1, prefix = "€")
) +
labs(
subtitle = "Absolute values"
)
} else {
plot <- plot +
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
}
return(plot)
}
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "abs")
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_0")
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_t", year = 2023)
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "abs")
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_0")
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_t", year = 2023)
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_t", year = 2023)
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_t", year = 2024)
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_t", year = 2022)
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_t", year = 2023)
# Plotting functions for the values in absolute value or indexed
plot_time_series <- function(
df,
fondi = c("Fondo A", "Fondo B"),
var_confronto = "partial_withdrawals_claims",
type_plot = "abs",
year = NULL
){
if(!type_plot %in% c("abs", "index_0", "index_t")) stop("type_plot must be 'abs' or 'index_0' or 'index_t'")
var_confronto_title <- var_confronto |> str_replace_all("_", " ") |> str_to_title()
data |>
select(
year,
group,
time,
reserve_math,
all_of(var_confronto),
) |>
filter(
group %in% fondi,
ifelse(is.null(!!year), T, year %in% !!year)
) |>
mutate(
across(year, as.factor),
time = time / 12,
y = case_when(
type_plot == "abs" ~ .data[[var_confronto]],
type_plot == "index_0" ~ .data[[var_confronto]] / first(reserve_math),
type_plot == "index_t" ~ .data[[var_confronto]] / lag(reserve_math)
)
) |>
filter(time > 0) -> data_graph
plot <- ggplot(
data_graph,
aes(
x = time,
y = y,
color = year,
linetype = group,
group = interaction(year, group)
)
) +
geom_line() +
theme_minimal() +
theme(legend.position = "bottom") +
scale_color_brewer(
palette = "Set1",
labels = fondi
) +
labs(
x = "",
y = "",
title = paste0("Time Series of ", var_confronto_title, " for ", paste(fondi, collapse = ", "))
)
if(type_plot == "abs"){
plot <- plot +
scale_y_continuous(
labels = scales::dollar_format(accuracy = 1, prefix = "€")
) +
labs(
subtitle = "Absolute values"
)
} else {
plot <- plot +
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
}
return(plot)
}
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "abs")
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_0")
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_t", year = 2023)
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "abs")
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_0")
# Plotting functions for the values in absolute value or indexed
plot_time_series <- function(
df,
fondi = c("Fondo A", "Fondo B"),
var_confronto = "partial_withdrawals_claims",
type_plot = "abs",
year = NULL
){
if(!type_plot %in% c("abs", "index_0", "index_t")) stop("type_plot must be 'abs' or 'index_0' or 'index_t'")
var_confronto_title <- var_confronto |> str_replace_all("_", " ") |> str_to_title()
data |>
select(
year,
group,
time,
reserve_math,
all_of(var_confronto),
) |>
filter(
group %in% fondi,
ifelse(is.null(!!year), T, year %in% !!year)
) |>
mutate(
across(year, as.factor),
time = time / 12,
y = case_when(
type_plot == "abs" ~ .data[[var_confronto]],
type_plot == "index_0" ~ .data[[var_confronto]] / first(reserve_math),
type_plot == "index_t" ~ .data[[var_confronto]] / lag(reserve_math)
)
) |>
filter(time > 0) -> data_graph
plot <- ggplot(
data_graph,
aes(
x = time,
y = y,
color = year,
linetype = group,
group = interaction(year, group)
)
) +
geom_line() +
theme_minimal() +
theme(legend.position = "bottom") +
scale_color_brewer(
palette = "Set1",
labels = year
) +
labs(
x = "",
y = "",
title = paste0("Time Series of ", var_confronto_title, " for ", paste(fondi, collapse = ", "))
)
if(type_plot == "abs"){
plot <- plot +
scale_y_continuous(
labels = scales::dollar_format(accuracy = 1, prefix = "€")
) +
labs(
subtitle = "Absolute values"
)
} else {
plot <- plot +
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
}
return(plot)
}
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "abs")
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_0")
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_t", year = 2023)
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_t", year = 2023)
# Plotting functions for the values in absolute value or indexed
plot_time_series <- function(
df,
fondi = c("Fondo A", "Fondo B"),
var_confronto = "partial_withdrawals_claims",
type_plot = "abs",
year = NULL
){
if(!type_plot %in% c("abs", "index_0", "index_t")) stop("type_plot must be 'abs' or 'index_0' or 'index_t'")
var_confronto_title <- var_confronto |> str_replace_all("_", " ") |> str_to_title()
if(is.null(year)) year <- unique(df$year)
data |>
select(
year,
group,
time,
reserve_math,
all_of(var_confronto),
) |>
filter(
group %in% fondi,
year %in% !!year
) |>
mutate(
across(year, as.factor),
time = time / 12,
y = case_when(
type_plot == "abs" ~ .data[[var_confronto]],
type_plot == "index_0" ~ .data[[var_confronto]] / first(reserve_math),
type_plot == "index_t" ~ .data[[var_confronto]] / lag(reserve_math)
)
) |>
filter(time > 0) -> data_graph
plot <- ggplot(
data_graph,
aes(
x = time,
y = y,
color = year,
linetype = group,
group = interaction(year, group)
)
) +
geom_line() +
theme_minimal() +
theme(legend.position = "bottom") +
scale_color_brewer(
palette = "Set1",
labels = year
) +
labs(
x = "",
y = "",
title = paste0("Time Series of ", var_confronto_title, " for ", paste(fondi, collapse = ", "))
)
if(type_plot == "abs"){
plot <- plot +
scale_y_continuous(
labels = scales::dollar_format(accuracy = 1, prefix = "€")
) +
labs(
subtitle = "Absolute values"
)
} else {
plot <- plot +
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
}
return(plot)
}
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "abs")
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_0")
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_t", year = 2023)
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_t", year = 2023)
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "abs")
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_0")
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_t", year = 2023)
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "abs")
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_0")
mapping_vars <- data |>
select(where(is.numeric)) |>
names()
mapping_vars
mapping_years <- distinct(data, year) |>
pull(year)
mapping_years
# Plotting functions for the values in absolute value or indexed
plot_time_series <- function(
df,
fondi = c("Fondo A", "Fondo B"),
var_confronto = "partial_withdrawals_claims",
type_plot = "abs",
year = NULL
) {
if (!type_plot %in% c("abs", "index_0", "index_t"))
stop("type_plot must be 'abs' or 'index_0' or 'index_t'")
var_confronto_title <- var_confronto |>
str_replace_all("_", " ") |>
str_to_title()
if (is.null(year)) year <- unique(df$year)
data |>
select(
year,
group,
time,
reserve_math,
all_of(var_confronto),
) |>
filter(
group %in% fondi,
year %in% !!year
) |>
mutate(
across(year, as.factor),
time = time / 12,
y = case_when(
type_plot == "abs" ~ .data[[var_confronto]],
type_plot == "index_0" ~ .data[[var_confronto]] / first(reserve_math),
type_plot == "index_t" ~ .data[[var_confronto]] / lag(reserve_math)
)
) |>
filter(time > 0) -> data_graph
plot <- ggplot(
data_graph,
aes(
x = time,
y = y,
color = year,
linetype = group,
group = interaction(year, group)
)
) +
geom_line() +
theme_minimal() +
theme(legend.position = "bottom") +
scale_color_brewer(
name = "Year",
palette = "Set1",
labels = year
) +
scale_linetype_manual(
name = "Funds",
) +
labs(
x = "",
y = "",
title = paste0(
"Time Series of ",
var_confronto_title,
" for ",
paste(fondi, collapse = ", ")
)
)
if (type_plot == "abs") {
plot <- plot +
scale_y_continuous(
labels = scales::dollar_format(accuracy = 1, prefix = "€")
) +
labs(
subtitle = "Absolute values"
)
} else {
plot <- plot +
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
}
return(plot)
}
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "abs")
# Plotting functions for the values in absolute value or indexed
plot_time_series <- function(
df,
fondi = c("Fondo A", "Fondo B"),
var_confronto = "partial_withdrawals_claims",
type_plot = "abs",
year = NULL
) {
if (!type_plot %in% c("abs", "index_0", "index_t"))
stop("type_plot must be 'abs' or 'index_0' or 'index_t'")
var_confronto_title <- var_confronto |>
str_replace_all("_", " ") |>
str_to_title()
if (is.null(year)) year <- unique(df$year)
data |>
select(
year,
group,
time,
reserve_math,
all_of(var_confronto),
) |>
filter(
group %in% fondi,
year %in% !!year
) |>
mutate(
across(year, as.factor),
time = time / 12,
y = case_when(
type_plot == "abs" ~ .data[[var_confronto]],
type_plot == "index_0" ~ .data[[var_confronto]] / first(reserve_math),
type_plot == "index_t" ~ .data[[var_confronto]] / lag(reserve_math)
)
) |>
filter(time > 0) -> data_graph
plot <- ggplot(
data_graph,
aes(
x = time,
y = y,
color = year,
linetype = group,
group = interaction(year, group)
)
) +
geom_line() +
theme_minimal() +
theme(legend.position = "bottom") +
scale_color_brewer(
name = "Year",
palette = "Set1",
labels = year
) +
scale_linetype(
name = "Funds",
) +
labs(
x = "",
y = "",
title = paste0(
"Time Series of ",
var_confronto_title,
" for ",
paste(fondi, collapse = ", ")
)
)
if (type_plot == "abs") {
plot <- plot +
scale_y_continuous(
labels = scales::dollar_format(accuracy = 1, prefix = "€")
) +
labs(
subtitle = "Absolute values"
)
} else {
plot <- plot +
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
}
return(plot)
}
plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "abs")
shinyWidgets::shinyWidgetsGallery()
shinyWidgets::shinyWidgetsGallery()
shinyWidgets::shinyWidgetsGallery()
2000:2030
paste("test_merged", years, ".csv", sep = "_"))
paste("test_merged", years, ".csv", sep = "_")
years = 2021:2024
paste("test_merged", years, ".csv", sep = "_")
paste0("test_merged", years, ".csv", sep = "_")
paste0("data_", paste(years, collapse = "_"), ".csv")
install.packages("shinyWidgets")
