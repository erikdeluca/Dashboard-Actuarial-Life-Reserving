)
} else {
plot <- plot +
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
}
if (show_text) {
plot <- plot +
ggrepel::geom_text_repel(
aes(
label = label,
),
size = 2.8,
segment.linetype = "dotted",
segment.color = "grey70",
segment.size = 0.5,
# max.overlaps = 10,
# max.time = 1,
# max.iter = 10000,
)
}
return(plot)
}
plot_time_series(
data,
c("Fondo C", "Fondo E"),
"partial_withdrawals_claims",
"abs"
)
df
df |> names()
save_fund_plots <- function(data,
funds,
vars,
years,
type_plot,
show_text,
width = 8,
height = 6,
path = "plots") {
dir_create(path)
walk(funds, function(fondo) {
fondo_dir <- fs::path(path, fondo)
dir_create(fondo_dir)
walk(vars, function(var) {
p <- plot_time_series(
df = data,
fondi = fondo,
var_confronto = var,
type_plot = type_plot,
year = years,
show_text = show_text
)
file_name <- paste0(var, "_", paste(years, collapse = "_"), ".png")
ggsave(
filename = path(fondo_dir, file_name),
plot = p,
width = width,
height = height,
dpi = 300
)
})
})
}
# example
save_fund_plots(
data = df,
funds = c("Fondo A", "Fondo B"),
vars = c("maturities_beg", "partial_withdrawals_claims_beg"),
years = c(2023, 2024),
type_plot = "abs",
show_text = TRUE,
width = 10,
height = 8,
path = "plots"
)
pacman:p_load(fs)
pacman::p_load(fs)
save_fund_plots <- function(data,
funds,
vars,
years,
type_plot,
show_text,
width = 8,
height = 6,
path = "plots") {
dir_create(path)
walk(funds, function(fondo) {
fondo_dir <- fs::path(path, fondo)
dir_create(fondo_dir)
walk(vars, function(var) {
p <- plot_time_series(
df = data,
fondi = fondo,
var_confronto = var,
type_plot = type_plot,
year = years,
show_text = show_text
)
file_name <- paste0(var, "_", paste(years, collapse = "_"), ".png")
ggsave(
filename = path(fondo_dir, file_name),
plot = p,
width = width,
height = height,
dpi = 300
)
})
})
}
# example
save_fund_plots(
data = df,
funds = c("Fondo A", "Fondo B"),
vars = c("maturities_beg", "partial_withdrawals_claims_beg"),
years = c(2023, 2024),
type_plot = "abs",
show_text = TRUE,
width = 10,
height = 8,
path = "plots"
)
#   "partial_withdrawals_claims",
#   "abs"
# )
# plot_time_series(
#   data,
#   c("Fondo D", "Fondo B"),
#   "partial_withdrawals_claims",
#   "index_t"
# )
# plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_t", year = 2023)
plot_time_series(
data,
c("Fondo D", "Fondo B"),
"partial_withdrawals_claims",
"abs",
year = c(2023, 2024)
)
# example
save_fund_plots(
data = df,
funds = c("Fondo A", "Fondo B"),
vars = c("maturities_beg", "partial_withdrawals_claims_beg"),
years = c(2023, 2024),
type_plot = "abs",
show_text = TRUE,
width = 10,
height = 8,
path = "plots"
)
df
# example
save_fund_plots(
data = data,
funds = c("Fondo A", "Fondo B"),
vars = c("maturities_beg", "partial_withdrawals_claims_beg"),
years = c(2023, 2024),
type_plot = "abs",
show_text = TRUE,
width = 10,
height = 8,
path = "plots"
)
# plot --------------------------------------------
# Plotting functions for the values in absolute value or indexed
plot_time_series <- function(
df,
fondi = c("Fondo A", "Fondo B"),
var_confronto = "partial_withdrawals_claims",
type_plot = "abs",
year = NULL,
show_text = TRUE,
...
) {
if (!type_plot %in% c("abs", "index_0", "index_t"))
stop("type_plot must be 'abs' or 'index_0' or 'index_t'")
var_confronto_title <- var_confronto |>
str_replace_all("_", " ") |>
str_to_title()
if (is.null(year)) year <- unique(df$year)
df |>
select(
year,
group,
time,
reserve_math,
all_of(var_confronto),
) |>
filter(
group %in% fondi,
year %in% !!year
) |>
mutate(
across(year, as.factor),
time = time / 12,
y = case_when(
type_plot == "abs" ~ .data[[var_confronto]],
type_plot == "index_0" ~ .data[[var_confronto]] / first(reserve_math),
type_plot == "index_t" ~ .data[[var_confronto]] / lag(reserve_math)
),
label = case_when(
type_plot == "abs" ~
number(
y,
accuracy = 1,
# prefix = "€",
scale_cut = cut_short_scale()
),
type_plot == "index_0" ~ scales::percent(y, accuracy = .1),
type_plot == "index_t" ~ scales::percent(y, accuracy = .1)
)
) |>
filter(time > 0) -> data_graph
plot <-
ggplot(
data_graph,
aes(
x = time,
y = y,
color = year,
linetype = group,
group = interaction(year, group)
)
) +
geom_line() +
scale_color_manual(
name = "Year",
values = pick_palette(my_palette, length(year)),
labels = year
) +
scale_linetype(
name = "Funds",
) +
labs(
x = "",
y = "",
title = paste0(
"Time Series of ",
var_confronto_title,
" for ",
paste(fondi, collapse = ", ")
)
) +
theme_minimal(base_family = "Figtree") +
theme(
legend.position = "bottom",
text = element_text(family = "Figtree", size = 12),
# plot.title = element_text(family = "Parkinsans", face = "bold"),
plot.title = element_text(family = "Figtree", face = "bold"),
plot.subtitle = element_text(family = "Figtree"),
axis.title = element_text(family = "Figtree"),
axis.text = element_text(family = "Figtree"),
legend.text = element_text(family = "Figtree"),
legend.title = element_text(family = "Figtree", face = "bold"),
# remove minor grid lines
panel.grid.minor = element_blank(),
)
if (type_plot == "abs") {
plot <- plot +
scale_y_continuous(
labels = scales::dollar_format(accuracy = 1, prefix = "€")
) +
labs(
subtitle = "Absolute values"
)
} else {
plot <- plot +
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
}
if (show_text) {
plot <- plot +
ggrepel::geom_text_repel(
aes(
label = label,
),
box.padding = 0.5,
point.padding = 0.5,
# fill = scales::alpha("white", 0.9),
# nudge_y = 0.01 * max(data_graph$y, na.rm = TRUE),
# nudge_x = 0.1,
# size = 2.8,
segment.linetype = "dotted",
segment.color = "grey70",
segment.size = 0.5,
# max.overlaps = 10,
# max.time = 1,
# max.iter = 10000,
)
}
return(plot)
}
#   "partial_withdrawals_claims",
#   "abs"
# )
# plot_time_series(
#   data,
#   c("Fondo D", "Fondo B"),
#   "partial_withdrawals_claims",
#   "index_t"
# )
# plot_time_series(data, c("Fondo D", "Fondo B"), "partial_withdrawals_claims", "index_t", year = 2023)
plot_time_series(
data,
c("Fondo D", "Fondo B"),
"partial_withdrawals_claims",
"abs",
year = c(2023, 2024)
)
save_fund_plots <- function(
data,
funds,
vars,
years,
type_plot,
show_text,
width = 8,
height = 6,
path = "plots"
) {
input_combo <- expand.grid(
fondo = funds,
var = vars,
plot_type = c("abs", "index_0", "index_t"),
stringsAsFactors = FALSE
)
pwalk(
input_combo,
function(fondo, var, plot_type) {
fondo_dir <- path(path, fondo)
dir_create(fondo_dir)
p <- plot_time_series(
df = data,
fondi = fondo,
var_confronto = var,
type_plot = plot_type,
year = years,
show_text = show_text
)
file_name <- paste0(
var,
"_",
plot_type,
"_",
paste(years, collapse = "_"),
".png"
)
ggsave(
filename = path(fondo_dir, file_name),
plot = p,
width = width,
height = height,
dpi = 300
)
}
)
}
# example
save_fund_plots(
data = data,
funds = c("Fondo A", "Fondo B"),
vars = c("maturities_beg", "partial_withdrawals_claims_beg"),
years = c(2023, 2024),
type_plot = "abs",
show_text = TRUE,
width = 10,
height = 8,
path = "plots"
)
save_fund_plots <- function(
data,
funds,
vars,
years,
show_text,
width = 8,
height = 6,
path = "plots"
) {
input_combo <- expand.grid(
fondo = funds,
var = vars,
plot_type = c("abs", "index_0", "index_t"),
stringsAsFactors = FALSE
)
pwalk(
input_combo,
function(fondo, var, plot_type) {
fondo_dir <- path(path, fondo)
dir_create(fondo_dir)
p <- plot_time_series(
df = data,
fondi = fondo,
var_confronto = var,
type_plot = plot_type,
year = years,
show_text = show_text
)
file_name <- paste0(
var,
"_",
plot_type,
"_",
paste(years, collapse = "_"),
".png"
)
ggsave(
filename = path(fondo_dir, file_name),
plot = p,
width = width,
height = height,
dpi = 300
)
}
)
}
save_fund_plots <- function(
data,
funds,
vars,
years,
show_text,
width = 8,
height = 6,
path = "plots"
) {
input_combo <- expand.grid(
fondo = funds,
var = vars,
plot_type = c("abs", "index_0", "index_t"),
stringsAsFactors = FALSE
)
total <- nrow(input_combo)
pwalk(
input_combo,
function(fondo, var, plot_type) {
idx <- which(
input_combo$fondo == fondo &
input_combo$var == var &
input_combo$plot_type == plot_type
)[1]
message(
paste0(
"[",
idx,
"/",
total,
"] Stampo grafico: fondo=",
fondo,
", variabile=",
var,
", tipo=",
plot_type
)
)
fondo_dir <- fs::path(path, fondo)
fs::dir_create(fondo_dir)
file_name <- paste0(
var,
"_",
plot_type,
"_",
paste(years, collapse = "_"),
".png"
)
tryCatch(
{
p <- plot_time_series(
df = data,
fondi = fondo,
var_confronto = var,
type_plot = plot_type,
year = years,
show_text = show_text
)
ggsave(
filename = fs::path(fondo_dir, file_name),
plot = p,
width = width,
height = height,
dpi = 300
)
},
error = function(e) {
showNotification(
paste0(
"Errore per fondo: ",
fondo,
", variabile: ",
var,
", tipo: ",
plot_type,
". Il grafico non sarà mostrato."
),
type = "error"
)
}
)
}
)
}
# example
save_fund_plots(
data = data,
funds = c("Fondo A", "Fondo B"),
vars = c("maturities_beg", "partial_withdrawals_claims_beg"),
years = c(2023, 2024),
show_text = TRUE,
width = 10,
height = 8,
path = "plots"
)
